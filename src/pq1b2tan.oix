#include "audio_draw.h"
#include "audio_nodes.h"
#include "Resources.h"

#include <cinder/audio/Utilities.h>
#include <cinder/audio/MonitorNode.h>
#include <cinder/Font.h>
#include <cinder/gl/gl.h>
#include <cinder/gl/TextureFont.h>
#include <cinder/app/App.h>
#include <cinder/Area.h>
#include "cinder/app/AppBasic.h"
#include "cinder/ImageIo.h"
#include "cinder/gl/gl.h"
#include "cinder/gl/Texture.h"

namespace cieq
{

    namespace 
    {
        //! A Matlab "Jet" palleted color composition implementation, adapted to Cinder.
        //! \note original work: http://paulbourke.net/texture_colour/colourspace/
        //! \note taken from: http://stackoverflow.com/a/7811134/1055628
        static inline ci::Color GetColor(float v, float vmin, float vmax)
        {
            ci::Color c{ ci::Color::white() }; // white
            float dv;

            if (v < vmin)
                v = vmin;
            if (v > vmax)
                v = vmax;
            dv = vmax - vmin;

            if (v < (vmin + 0.25f * dv)) {
                c.r = 0.0f;
                c.g = 4.0f * (v - vmin) / dv;
            }
            else if (v < (vmin + 0.5f * dv)) {
                c.r = 0.0f;
                c.b = 1.0f + 4.0f * (vmin + 0.25f * dv - v) / dv;
            }
            else if (v < (vmin + 0.75f * dv)) {
                c.r = 4.0f * (v - vmin - 0.5f * dv) / dv;
                c.b = 0.0f;
            }
            else {
                c.g = 1.0f + 4.0f * (vmin + 0.75f * dv - v) / dv;
                c.b = 0.0f;
            }

            return c;
        }
    }

Plot::Plot()
    : mDrawBounds(true)
    , mBoundsColor(0.5f, 0.5f, 0.5f, 1)
{}

void Plot::draw(double winSizeMs, float shift, float shiftLength, float userMaxMag, bool linearDbMode) //Added 'size_t shift' to hopefully allow for window shifting
{
    drawLocal(winSizeMs, shift, shiftLength, userMaxMag, linearDbMode);

	if (mDrawBounds)
	{
		drawBounds();
	}

	if (mDrawLabels)
	{
		drawLabels();
	}
}

void Plot::drawBounds()
{
	ci::gl::color(mBoundsColor);
	ci::gl::drawStrokedRect(mBounds);
}

void Plot::drawLabels()
{
    ci::gl::color(0, 0.9f, 0.9f);

    // draw plot title
    ci::gl::drawStringCentered(mPlotTitle, ci::Vec2f(mBounds.x1 + mBounds.getWidth() / 2.0f, mBounds.y1 - (mLabelFont.getSize() * 2.0f) + 10.0f), ci::ColorA::white(), mLabelFont);

	// draw x-axis label
    ci::gl::drawStringCentered(mHorzText, ci::Vec2f(mBounds.x1 + mBounds.getWidth() / 2.0f, mBounds.y2 + (mLabelFont.getSize() - 0.0f) + 10.0f), ci::ColorA::white(), mLabelFont);

	// draw y-axis label
	ci::gl::pushModelView();
    ci::gl::translate(mBounds.x1 - mLabelFont.getSize() * 2.5f, mBounds.y1 + mBounds.getHeight() / 2.0f); //(mBounds.x1 - mLabelFont.getSize() * 2.0f, mBounds.y1 + mBounds.getHeight() / 2.0f)
	ci::gl::rotate(-90.0f);
    ci::gl::drawStringCentered(mVertText, ci::Vec2f::zero(), ci::ColorA::white(), mLabelFont);
	ci::gl::popModelView();
}

void Plot::onHorzAxisTextChange()
{
	mHorzText = mHorzTitle + " (" + mHorzUnit +")";
}

void Plot::onVertAxisTextChange()
{
	mVertText = mVertTitle + " (" + mVertUnit + ")";
}

void Plot::setup()
{
    mLabelFont = ci::Font(ci::app::loadResource(LABEL_FONT), 16);
}

SpectrumPlot::SpectrumPlot(AudioNodes& nodes)
	: mScaleDecibels( true )
	, mAudioNodes(nodes)
{
    setPlotTitle("FFT Magnitude Spectrum of Audio Signal");
    setHorzAxisTitle("Frequency").setHorzAxisUnit("Hz");
    setVertAxisTitle("Magnitude").setVertAxisUnit("dB");
}

// original draw function is from Cinder examples _audio/common
void SpectrumPlot::drawLocal(double winSizeMs, float shift, float shiftLength, float userMaxMag, bool linearDbMode) //Added 'size_t shift' to hopefully allow for window shifting
{
	auto& spectrum = mAudioNodes.getMonitorSpectralNode(1)->getMagSpectrum();
	
	if (spectrum.empty())
		return;

	ci::ColorA bottomColor(0, 0, 0.7f, 1);

	float width = mBounds.getWidth();
	float height = mBounds.getHeight();
	std::size_t numBins = spectrum.size();
	float padding = 0;
	float binWidth = ( width - padding * ( numBins - 1 ) ) / (float)numBins;

	std::size_t numVerts = spectrum.size() * 2 + 2;
	if( mVerts.size() < numVerts ) {
		mVerts.resize( numVerts );
		mColors.resize( numVerts );
	}

	std::size_t currVertex = 0;
	ci::Rectf bin(mBounds.x1, mBounds.y1, mBounds.x1 + binWidth, mBounds.y2);
	for( std::size_t i = 0; i < numBins; i++ ) {
		float m = spectrum[i];
		if( mScaleDecibels )
			m = ci::audio::linearToDecibel(m) / 100;

		bin.y1 = bin.y2 - m * height;

		mVerts[currVertex] = bin.getLowerLeft();
		mColors[currVertex] = bottomColor;
		mVerts[currVertex + 1] = bin.getUpperLeft();
		mColors[currVertex + 1] = ci::ColorA( 0, m, 0.7f, 1 );

		bin += ci::Vec2f(binWidth + padding, 0);
		currVertex += 2;
	}

	mVerts[currVertex] = bin.getLowerLeft();
	mColors[currVertex] = bottomColor;
	mVerts[currVertex + 1] = bin.getUpperLeft();
	mColors[currVertex + 1] = mColors[currVertex - 1];

	ci::gl::color(0, 0.9f, 0);

	glEnableClientState( GL_VERTEX_ARRAY );
	glEnableClientState( GL_COLOR_ARRAY );
	glVertexPointer( 2, GL_FLOAT, 0, mVerts.data() );
	glColorPointer( 4, GL_FLOAT, 0, mColors.data() );  // note: on OpenGL ES v1.1, the 'size' param to glColorPointer can only be 4
	glDrawArrays( GL_TRIANGLE_STRIP, 0, (GLsizei)mVerts.size() );
	glDisableClientState( GL_VERTEX_ARRAY );
	glDisableClientState( GL_COLOR_ARRAY );
}

void SpectrumPlot::enableDecibelsScale(bool on /*= true*/)
{
	mScaleDecibels = on;
}


WaveformPlot::WaveformPlot(AudioNodes& nodes)
	: mGraphColor(0, 0.9f, 0, 1)
	, mAudioNodes(nodes)
{}

void WaveformPlot::setGraphColor(const ci::ColorA& color)
{
	mGraphColor = color;
}

// original draw function is from Cinder examples _audio/common
void WaveformPlot::drawLocal(double winSizeMs, float shift, float shiftLength, float userMaxMag, bool linearDbMode) //Added 'size_t shift' to hopefully allow for window shifting
{
    auto& buffer = mAudioNodes.getMonitorNode()->getBuffer();
    size_t hardwareSampleRate = 0;
    //Get current sample rate of audio hardware:
    hardwareSampleRate = mAudioNodes.getInputDeviceNode()->getSampleRate();
    //Get total number of frames in raw audio buffer:
    size_t rawNumFrames = buffer.getNumFrames();
    //Create a variable to use for window size of shifted window in samples:
    size_t shiftLengthSamples = 0;
    //Check to make sure there was an input given for shiftLength:
    if (shiftLength <= 0 || shiftLength == NULL)
    {
        shiftLength = rawNumFrames;
    }
    else
    {
        //Convert window size of shifted window from seconds to nearest whole number of samples:
        shiftLengthSamples = floor(shiftLength * hardwareSampleRate);
    }
    //convert window shift from seconds to nearest whole number of samples:
    size_t shiftInt = floor(shift * hardwareSampleRate);
    //Calculate what number of samples needs to be subtracted from the raw number of samples:
    size_t shiftSub = rawNumFrames - (shiftLengthSamples + shiftInt);
    //Calculate what the new ending sample number should be:
    size_t shiftEnd = rawNumFrames - shiftSub;
    //Need to make sure the shifted window doesn't exceed the raw input window:
    if (shiftEnd > rawNumFrames || shiftEnd < 0)
    {
        shiftEnd = rawNumFrames;
        shiftInt = 0;
    }

	ci::gl::color(mGraphColor);

	const float waveHeight = mBounds.getHeight() / (float)buffer.getNumChannels();
    const float width = mBounds.getWidth();
    //Changed denominator to rescale xScale based on shift window so shifted signal "zooms" to full graph width:
    const float xScale = (mBounds.getWidth() / ((float)shiftEnd - shiftInt));

	float yOffset = mBounds.y1;
	for (std::size_t ch = 0; ch < buffer.getNumChannels(); ch++) 
    {
		ci::PolyLine2f waveform;
		const float *channel = buffer.getChannel(ch);
		float x = mBounds.x1;
        //Added the 'shift' portions below to allow for window shifting:
        for (std::size_t i = 0; i < (shiftEnd - shiftInt); i++) 
        {
			x += xScale;
            float y = (1 - (channel[i + shiftInt] * 0.5f + 0.5f)) * waveHeight + yOffset;
            waveform.push_back(ci::Vec2f(x, y));
		}

		if (!waveform.getPoints().empty())
			ci::gl::draw(waveform);

		yOffset += waveHeight;
	}
}

void SpectrogramPlot::setup(int duration, size_t width)
{
    Plot::setup();
    mTexW = width; // mAudioNodes.getMonitorSpectralNode()->getNumBins(); //mBounds.x2 - mBounds.x1;
    //swap out the texture every "duration" seconds
    mTexH = static_cast<std::size_t>(duration);

    mSpectrals[0] = Surface32f(mTexW, mTexH, false, SurfaceChannelOrder::RGBA);
    mSpectrals[1] = Surface32f(mTexW, mTexH, false, SurfaceChannelOrder::RGBA);
    mTexCache = gl::Texture(mSpectrals.back());
    //gl::scale(mTexCache);  !!Need to check this out!!
    nodeNumber = 1;
}

SpectrogramPlot::SpectrogramPlot(AudioNodes& nodes)
: mAudioNodes(nodes)
, mTexH(0)
, mTexW(0)
, mFrameCounter(0)
, mActiveSurface(0)
, mBackBufferSurface(1)
{
    setPlotTitle("Spectrogram");
    setHorzAxisTitle("Frequency").setHorzAxisUnit("Hz");
    setVertAxisTitle("Time").setVertAxisUnit("s");
}

void SpectrogramPlot::drawLocal(double winSizeMs, float shift, float shiftLength, float userMaxMag, bool linearDbMode)
{
    if (mTimer.isStopped())
    {
        timeEnter = 0;
        timeEnterPrev = 0;
        timeExit = 0;
        mTimer.start();
    }

    //Variables that can be initialized with constants:
    pixelSpecMag = 0.0;
    flag = 0;
    pixelsPerBin = 1;
    binSkipMult = 1;

    hardwareSampleRate = mAudioNodes.getInputDeviceNode()->getSampleRate(); //Get current sample rate of audio hardware
    //numBins = mAudioNodes.getMonitorSpectralNode(1)->getNumBins();
    //maxDispBins = numBins;
    maxDispBins = mTexW;
    //fftSize = mAudioNodes.getMonitorSpectralNode(1)->getFftSize();

    timeSec1Enter = mTimer.getSeconds();
    cinder::audio::MonitorSpectralNode* const mMonitorSpectralNode = mAudioNodes.getMonitorSpectralNode(nodeNumber);
    timeSec1Exit = mTimer.getSeconds();
    timeSec1Process = timeSec1Exit - timeSec1Enter;
    timeCurrentNodeStart = mAudioNodes.getTimeOfNode(nodeNumber);
    timeCurrentNodeCall = mAudioNodes.getTimer()->getSeconds();
    timeCurrentNodeRem = remainder(timeCurrentNodeCall - timeCurrentNodeStart, winSizeMs);
    //timeCurrentNodeRem = remainder(0.249, winSizeMs);
    //while (timeCurrentNodeRem > 0.003) //|| timeCurrentNodeRem < -0.001
    //{
    //    timeCurrentNodeCall = mAudioNodes.getTimer()->getSeconds();
    //    timeCurrentNodeRem = remainder(timeCurrentNodeCall - timeCurrentNodeStart, winSizeMs);
    //}
    timeCurrentNodeCall = mAudioNodes.getTimer()->getSeconds();
    timeCurrentNodeRem = remainder(timeCurrentNodeCall - timeCurrentNodeStart, winSizeMs);
    timeSec2Enter = mTimer.getSeconds();
    timeNode1Start = mAudioNodes.getTimeOfNode(1);
    if (timeNode1Start != timeNode1StartPrev)
    {
        timeEnter = mAudioNodes.getTimer()->getSeconds();
        timeReturn = timeEnter - timeNode1Start;
        timeHop = timeReturn;
        while (timeHop < winSizeMs)
        {
            timeHop = mAudioNodes.getTimer()->getSeconds() - timeNode1Start; //timeReturn + (mAudioNodes.getTimer()->getSeconds() - timeEnter)
        }
        timeNode1StartPrev = timeNode1Start;
    }
    else
    {
        timeEnter = mTimer.getSeconds();
        timeReturn = timeEnter - timeEnterPrev;
        timeHop = timeReturn;
        while (timeHop < (double(1.0) / static_cast<double>(shift)))
        {
            timeHop = timeReturn + (mTimer.getSeconds() - timeEnter);
        }
        timeEnterPrev = mTimer.getSeconds();
    }
    spectrum = mMonitorSpectralNode->getMagSpectrum();//Might be able to free up some speed by initializing this somehow rather than letting it create a
                                                      //new "auto" array every time it comes in here. Nope, it's getting the magSpectrum data that's slow.
    timeHop = ceil((timeHop * pow(10, 3)) - 0.49) / pow(10, 3); //"Round" timeHop variable to nearest three decimal places.
    actualHopRate = 1 / timeHop;
    nodeNumber++;
    size_t nodesToProcess = static_cast<size_t>(ceil(winSizeMs / (double(1.0) / static_cast<double>(shift))));
    if (nodeNumber > nodesToProcess)
    {
        nodeNumber = 1;
    }
    timeSec2Exit = mTimer.getSeconds();
    timeSec2Process = timeSec2Exit - timeSec2Enter;
    if (actualHopRate < static_cast<double>(shift) - 1)
    {
        flag = 1;
    }
    plotWidth = mBounds.x2 - mBounds.x1;
    timeSec3Enter = mTimer.getSeconds();
    //shiftLength = shiftLength + 0.1*shiftLength;
    //if (shiftLength > 0)
    //{
    //    maxDispBins = shiftLength / ((static_cast<float>(hardwareSampleRate) / 2) / static_cast<float>(numBins));
    //}
	//maxFreqDisp = mAudioNodes.getMaxFreqDisp(maxDispBins);
	//if (maxFreqDisp > static_cast<size_t>(shiftLength))
	//{
 //       maxDispBins = (shiftLength * fftSize) / hardwareSampleRate;
 //       maxFreqDisp = mAudioNodes.getMaxFreqDisp(maxDispBins);
	//	while (maxFreqDisp > static_cast<size_t>(shiftLength))
	//	{
	//		maxDispBins--;
	//		maxFreqDisp = mAudioNodes.getMaxFreqDisp(maxDispBins);
	//	}
	//	maxDispBins++;
	//}
 //   if (maxDispBins <= plotWidth)
 //   {
 //       pixelsPerBin = ceil(static_cast<double>(plotWidth) / static_cast<double>(maxDispBins));
 //       maxDispBins = ceil(static_cast<double>(plotWidth) / static_cast<double>(pixelsPerBin));
 //       maxFreqDisp = mAudioNodes.getMaxFreqDisp(maxDispBins);
 //       while (maxFreqDisp < shiftLength)
 //       {
 //           pixelsPerBin--;
	//		if (pixelsPerBin < 1)
	//		{
	//			pixelsPerBin = 1;
	//		}
 //           //pixelsPerBin = ceil(static_cast<double>(plotWidth) / static_cast<double>(maxDispBins));
 //           maxDispBins = ceil(static_cast<double>(plotWidth) / static_cast<double>(pixelsPerBin));
 //           maxFreqDisp = mAudioNodes.getMaxFreqDisp(maxDispBins);
 //       }
 //   }
 //   else
 //   {
 //       binSkipMult = floor(static_cast<double>(maxDispBins) / static_cast<double>(plotWidth));
 //       maxDispBins = plotWidth * binSkipMult;
 //       maxFreqDisp = mAudioNodes.getMaxFreqDisp(maxDispBins);
 //       while (maxFreqDisp < shiftLength)
 //       {
 //           binSkipMult++;
 //           maxDispBins = plotWidth * binSkipMult;
 //           maxFreqDisp = mAudioNodes.getMaxFreqDisp(maxDispBins);
 //       }
 //   }
    timeSec3Exit = mTimer.getSeconds();
    timeSec3Process = timeSec3Exit - timeSec3Enter;

    if (spectrum.empty())
        return;

    Surface32f::Iter surface_iter = mSpectrals[mActiveSurface].getIter();
    while (surface_iter.line())
    {
        if (surface_iter.mY != mFrameCounter) continue;
        //Original code:
        //while (surface_iter.pixel())
        //{
        //    //Original Code:
        //    //const auto m = spectrum[surface_iter.mX] / 100;
        //    //surface_iter.r() = 1.0f; // (surface_iter.mX + 1) * (1 / mTexW);
        //    //surface_iter.g() = 0; // (surface_iter.mX + 1) * (1 / mTexW);
        //    //surface_iter.b() = static_cast<float>((surface_iter.mX + 1000) * (1 / mTexW));
        //    //surface_iter.a() = 1.0f;
        //    pixelSpecMag = spectrum[surface_iter.mX];
        //    //auto m = pixelSpecMag * userMaxMag; // ci::audio::linearToDecibel(pixelSpecMag) / userMaxMag; //pixelSpecMag
        //    //surface_iter.r() = m; //Why is red disabled???!!!
        //    //surface_iter.g() = m;
        //    //surface_iter.b() = 1.0f - m;
        //    auto m = userMaxMag * pixelSpecMag;
        //    auto c = GetColor(m, 0.0f, 1.0f);
        //    surface_iter.r() = c.r;
        //    surface_iter.g() = c.g;
        //    surface_iter.b() = c.b;
        //}
        //My modifications:
        for (std::size_t i0 = 0; i0 < maxDispBins; i0++)
        {
            //Draw x-axis tick labels:
            if ((i0 * binSkipMult) == 0)
            {
                ci::gl::drawStringCentered(std::to_string(mAudioNodes.getMaxFreqDisp(i0)), Vec2f(mBounds.x1, mBounds.y2 + 10), ci::ColorA::white(), mLabelFont);
            }
            else if ((i0 * binSkipMult) == maxDispBins - 25)
            {
                flag = 0;
            }
            for (std::size_t i1 = 0; i1 < pixelsPerBin; i1++)
            {
                if (surface_iter.pixel())
                {
                    pixelSpecMag = spectrum[i0];
                    if (linearDbMode == 0)
                    {
                        pixelDispMag = userMaxMag * pixelSpecMag;  // Linear Mode
                    }
                    else
                    {
                        pixelDispMag = ci::audio::linearToDecibel(pixelSpecMag) / userMaxMag; // dB Mode
                    }
                    ci::Color c = GetColor(pixelDispMag, 0.0f, 1.0f);
                    surface_iter.r() = c.r;
                    surface_iter.g() = c.g;
                    surface_iter.b() = c.b;
                    surface_iter.a() = 1.0f;
                }
                else
                {
                    flag = 1;
                    //maxDispBins = i0 * binSkipMult;
                    maxDispBins = i0;
                }
            }
        }
    }

    //mFrameCounter++;

    const auto height_offset = (mFrameCounter) * (mBounds.getHeight() / mTexH);
    const auto available_height = mBounds.getHeight() - height_offset;

    ci::Area requested_area(0, mFrameCounter, mTexW, mTexH);//mTexW, mTexH
    ci::Rectf requested_rect(mBounds.x1, mBounds.y1 + height_offset, mBounds.x2, mBounds.y2);
    ci::gl::draw(mSpectrals[mActiveSurface], mBounds); // (mSpectrals[mActiveSurface], mBounds)
    ci::gl::draw(mTexCache, requested_area, requested_rect); // (mTexCache, requested_area, requested_rect)
    ci::gl::color(ci::Color(1.0f, 1.0f, 1.0f));
    //Draw x-axis tick marks:
    ci::gl::drawLine(Vec2f(mBounds.x1, mBounds.y2), Vec2f(mBounds.x1, mBounds.y2 + 10)); //Origin tick mark
    ci::gl::drawLine(Vec2f(mBounds.x1 + ((mBounds.x2 - mBounds.x1) / 2), mBounds.y2), Vec2f(mBounds.x1 + ((mBounds.x2 - mBounds.x1) / 2), mBounds.y2 + 10)); //Center tick mark
    ci::gl::drawLine(Vec2f(mBounds.x2, mBounds.y2), Vec2f(mBounds.x2, mBounds.y2 + 10)); //End tick mark
    //Draw y-axis tick marks:
    ci::gl::drawLine(Vec2f(mBounds.x1, mBounds.y1), Vec2f(mBounds.x1 - 10, mBounds.y1)); //Origin tick mark
    ci::gl::drawLine(Vec2f(mBounds.x1, mBounds.y1 + ((mBounds.y2 - mBounds.y1) / 2)), Vec2f(mBounds.x1 - 10, mBounds.y1 + ((mBounds.y2 - mBounds.y1) / 2))); //Center tick mark
    ci::gl::drawLine(Vec2f(mBounds.x1, mBounds.y2), Vec2f(mBounds.x1 - 10, mBounds.y2)); //End tick mark

    timeSec3Enter = mTimer.getSeconds();
    //gl::scale(
    //    static_cast<float>((mBounds.x2 - mBounds.x1) / mSpectrals[mActiveSurface].getWidth()),
    //    static_cast<float>((mBounds.y2 - mBounds.y1) / mSpectrals[mActiveSurface].getHeight()));
    //Playing around with scaling:
    //ci::Area requested_area(0, mFrameCounter, mTexW, mTexH);//mTexW, mTexH
    //ci::Rectf requested_rect(mBounds.x1, mBounds.y1 + height_offset, mBounds.x2, mBounds.y2);
    //gl::pushMatrices();
    //ci::gl::draw(mSpectrals[mActiveSurface], mBounds); // (mSpectrals[mActiveSurface], mBounds)
    //ci::gl::draw(mTexCache, ci::Vec2f(mBounds.x1, mFrameCounter)); // (mTexCache, requested_area, requested_rect)
    //gl::scale(
    //    0.5,  // static_cast<float>((mBounds.x2 - mBounds.x1) / mTexCache.getWidth()),
    //    1); // static_cast<float>((mBounds.y2 - mBounds.y1) / mTexCache.getHeight())
    //gl::popMatrices();

    mFrameCounter++;
    //mFrameCounter = mFrameCounter + 2;

    
    if (mFrameCounter >= mTexH) //mTexH
    {
        mFrameCounter = 0;
        std::swap(mActiveSurface, mBackBufferSurface);
        mTexCache.update(mSpectrals[mBackBufferSurface]);
    }
    timeExit = mTimer.getSeconds();
    timeProcess = timeExit - timeEnterPrev;
    timeExit = mTimer.getSeconds();
    timeLine = mTimer.getSeconds();
}

//Surface32f::Iter getSurfaceIter(Surface32f *surface)
//{
//    Area area = Area(0, 0, surface->getWidth(), surface->getHeight());
//    return surface->getIter(area);
//}

size_t SpectrogramPlot::getMaxDispBins()
{
    return maxDispBins;
}

double SpectrogramPlot::getActualHopRate()
{
    return actualHopRate;
}

size_t SpectrogramPlot::getPlotWidth()
{
    return plotWidth;
}

} //!namespace cieq